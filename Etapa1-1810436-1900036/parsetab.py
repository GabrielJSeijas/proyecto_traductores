
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTkOrleftTkAndrightTkNotnonassocTkLessTkGreaterTkLeqTkGeqTkEqualTkNEqualleftTkCommaleftTkPlusTkMinusleftTkMultrightUMINUSTkAnd TkApp TkArrow TkAsig TkBool TkCBlock TkCBracket TkClosePar TkComma TkElse TkEnd TkEqual TkFalse TkFi TkFunction TkGeq TkGreater TkGuard TkId TkIf TkInt TkLeq TkLess TkMinus TkMult TkNEqual TkNot TkNum TkOBlock TkOBracket TkOpenPar TkOr TkPlus TkPrint TkReturn TkSemicolon TkSkip TkSoForth TkString TkTrue TkTwoPoints TkWhileprogram : blockblock : TkOBlock opt_stmt_list TkCBlockopt_stmt_list : stmt_list\n| emptystmt_list : statement\n| statement TkSemicolon stmt_liststatement : declaration_stmt\n| assignment_stmt\n| print_stmt\n| skip_stmt\n| return_stmt\n| if_stmt\n| while_stmtdeclaration_stmt : TkInt declare_id_list\n| TkBool declare_id_list \n| TkFunction TkOBracket TkSoForth TkNum TkCBracket declare_id_listdeclare_id_list : TkId\n| TkId TkComma declare_id_listassignment_stmt : TkId TkAsig exprprint_stmt : TkPrint exprskip_stmt : TkSkipreturn_stmt : TkReturn exprwhile_stmt : TkWhile expr TkArrow body_sequencing TkEndif_guards_list_collector : if_guard_clause_tuple\n| if_guards_list_collector if_guard_clause_tupleif_guard_clause_tuple : expr TkArrow body_sequencing\n| TkGuard expr TkArrow body_sequencingif_stmt : TkIf if_guards_list TkFiif_guards_list : if_guard_clause\n| if_guard_clause if_guards_listif_guard_clause : expr TkArrow body_sequencing\n| TkGuard expr TkArrow body_sequencingbody_sequencing : body_stmt_item\n| body_stmt_item TkSemicolon body_sequencingbody_stmt_item : assignment_stmt\n| print_stmt\n| skip_stmt\n| return_stmt\n| if_stmt\n| while_stmt\n| block\natom : atom TkApp simple_atomatom : simple_atomsimple_atom : atom TkOpenPar expr TkCloseParsimple_atom : TkOpenPar expr TkCloseParsimple_atom : TkIdsimple_atom : TkNumsimple_atom : TkTrue\n| TkFalsesimple_atom : TkStringexpr : TkMinus expr %prec UMINUSexpr : TkNot exprexpr : expr TkPlus expr\n| expr TkMinus expr\n| expr TkMult expr\n| expr TkAnd expr\n| expr TkOr expr\n| expr TkEqual expr\n| expr TkNEqual expr\n| expr TkLess expr\n| expr TkGreater expr\n| expr TkLeq expr\n| expr TkGeq exprexpr : atomexpr : TkNumexpr : TkTrue\n| TkFalseexpr : TkStringexpr : TkIdexpr : expr TkComma exprexpr : expr TkTwoPoints exprempty :'
    
_lr_action_items = {'TkOBlock':([0,72,74,108,112,],[3,3,3,3,3,]),'$end':([1,2,24,],[0,-1,-2,]),'TkCBlock':([3,4,5,6,7,8,9,10,11,12,13,14,20,26,27,28,31,34,35,36,37,38,39,40,42,48,51,65,66,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,111,114,115,],[-72,24,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-21,-14,-17,-15,-20,-64,-47,-48,-49,-50,-46,-43,-22,-6,-19,-51,-52,-28,-18,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-44,-23,-16,]),'TkInt':([3,25,],[15,15,]),'TkBool':([3,25,],[16,16,]),'TkFunction':([3,25,],[17,17,]),'TkId':([3,15,16,19,20,21,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,74,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,116,],[18,27,27,39,-21,39,39,39,-2,18,39,-20,39,39,-64,-47,-48,-49,-50,-46,-43,39,-22,39,39,27,-19,39,39,39,39,39,39,39,39,39,39,39,39,39,-51,-52,92,39,-28,18,18,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,18,27,-44,18,-32,-23,-34,]),'TkPrint':([3,25,72,74,108,112,],[19,19,19,19,19,19,]),'TkSkip':([3,25,72,74,108,112,],[20,20,20,20,20,20,]),'TkReturn':([3,25,72,74,108,112,],[21,21,21,21,21,21,]),'TkIf':([3,25,72,74,108,112,],[22,22,22,22,22,22,]),'TkWhile':([3,25,72,74,108,112,],[23,23,23,23,23,23,]),'TkSemicolon':([7,8,9,10,11,12,13,14,20,24,26,27,28,31,34,35,36,37,38,39,40,42,51,65,66,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,100,101,102,103,104,105,106,107,111,114,115,],[25,-7,-8,-9,-10,-11,-12,-13,-21,-2,-14,-17,-15,-20,-64,-47,-48,-49,-50,-46,-43,-22,-19,-51,-52,-28,-18,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,112,-35,-36,-37,-38,-39,-40,-41,-44,-23,-16,]),'TkOBracket':([17,],[29,]),'TkAsig':([18,],[30,]),'TkMinus':([19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[32,-21,32,32,32,-2,32,53,32,32,-64,-47,-48,-49,-50,-46,-43,32,53,32,53,32,53,53,32,32,32,32,32,32,32,32,32,32,32,32,32,-51,53,32,53,-28,53,-53,-54,-55,53,53,53,53,53,53,53,53,53,53,-42,-46,-47,-48,-49,-50,53,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkNot':([19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[33,-21,33,33,33,-2,33,-20,33,33,-64,-47,-48,-49,-50,-46,-43,33,-22,33,33,-19,33,33,33,33,33,33,33,33,33,33,33,33,33,-51,-52,33,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkNum':([19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[35,-21,35,35,35,-2,35,-20,35,35,-64,-47,-48,-49,-50,-46,-43,35,-22,35,35,76,-19,35,35,35,35,35,35,35,35,35,35,35,35,35,-51,-52,93,35,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkTrue':([19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[36,-21,36,36,36,-2,36,-20,36,36,-64,-47,-48,-49,-50,-46,-43,36,-22,36,36,-19,36,36,36,36,36,36,36,36,36,36,36,36,36,-51,-52,94,36,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkFalse':([19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[37,-21,37,37,37,-2,37,-20,37,37,-64,-47,-48,-49,-50,-46,-43,37,-22,37,37,-19,37,37,37,37,37,37,37,37,37,37,37,37,37,-51,-52,95,37,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkString':([19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[38,-21,38,38,38,-2,38,-20,38,38,-64,-47,-48,-49,-50,-46,-43,38,-22,38,38,-19,38,38,38,38,38,38,38,38,38,38,38,38,38,-51,-52,96,38,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkOpenPar':([19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[41,-21,41,41,41,-2,41,-20,41,41,68,-47,-48,-49,-50,-46,-43,41,-22,41,41,-19,41,41,41,41,41,41,41,41,41,41,41,41,41,-51,-52,41,41,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,68,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkGuard':([20,22,24,31,34,35,36,37,38,39,40,42,44,51,65,66,70,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[-21,46,-2,-20,-64,-47,-48,-49,-50,-46,-43,-22,46,-19,-51,-52,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkFi':([20,24,31,34,35,36,37,38,39,40,42,43,44,51,65,66,70,71,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,111,113,114,116,],[-21,-2,-20,-64,-47,-48,-49,-50,-46,-43,-22,70,-29,-19,-51,-52,-28,-30,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-31,-33,-35,-36,-37,-38,-39,-40,-41,-44,-32,-23,-34,]),'TkEnd':([20,24,31,34,35,36,37,38,39,40,42,51,65,66,70,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,100,101,102,103,104,105,106,107,109,111,114,116,],[-21,-2,-20,-64,-47,-48,-49,-50,-46,-43,-22,-19,-51,-52,-28,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-33,-35,-36,-37,-38,-39,-40,-41,114,-44,-23,-34,]),'TkComma':([27,31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[49,63,-64,-47,-48,-49,-50,-46,-43,63,63,63,63,-51,63,63,63,-53,-54,-55,63,63,63,63,63,63,63,63,-70,63,-42,-46,-47,-48,-49,-50,63,-45,-44,]),'TkSoForth':([29,],[50,]),'TkPlus':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[52,-64,-47,-48,-49,-50,-46,-43,52,52,52,52,-51,52,52,52,-53,-54,-55,52,52,52,52,52,52,52,52,52,52,-42,-46,-47,-48,-49,-50,52,-45,-44,]),'TkMult':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[54,-64,-47,-48,-49,-50,-46,-43,54,54,54,54,-51,54,54,54,54,54,-55,54,54,54,54,54,54,54,54,54,54,-42,-46,-47,-48,-49,-50,54,-45,-44,]),'TkAnd':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[55,-64,-47,-48,-49,-50,-46,-43,55,55,55,55,-51,-52,55,55,-53,-54,-55,-56,55,-58,-59,-60,-61,-62,-63,-70,55,-42,-46,-47,-48,-49,-50,55,-45,-44,]),'TkOr':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[56,-64,-47,-48,-49,-50,-46,-43,56,56,56,56,-51,-52,56,56,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,56,-42,-46,-47,-48,-49,-50,56,-45,-44,]),'TkEqual':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[57,-64,-47,-48,-49,-50,-46,-43,57,57,57,57,-51,57,57,57,-53,-54,-55,57,57,None,None,None,None,None,None,-70,57,-42,-46,-47,-48,-49,-50,57,-45,-44,]),'TkNEqual':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[58,-64,-47,-48,-49,-50,-46,-43,58,58,58,58,-51,58,58,58,-53,-54,-55,58,58,None,None,None,None,None,None,-70,58,-42,-46,-47,-48,-49,-50,58,-45,-44,]),'TkLess':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[59,-64,-47,-48,-49,-50,-46,-43,59,59,59,59,-51,59,59,59,-53,-54,-55,59,59,None,None,None,None,None,None,-70,59,-42,-46,-47,-48,-49,-50,59,-45,-44,]),'TkGreater':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[60,-64,-47,-48,-49,-50,-46,-43,60,60,60,60,-51,60,60,60,-53,-54,-55,60,60,None,None,None,None,None,None,-70,60,-42,-46,-47,-48,-49,-50,60,-45,-44,]),'TkLeq':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[61,-64,-47,-48,-49,-50,-46,-43,61,61,61,61,-51,61,61,61,-53,-54,-55,61,61,None,None,None,None,None,None,-70,61,-42,-46,-47,-48,-49,-50,61,-45,-44,]),'TkGeq':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[62,-64,-47,-48,-49,-50,-46,-43,62,62,62,62,-51,62,62,62,-53,-54,-55,62,62,None,None,None,None,None,None,-70,62,-42,-46,-47,-48,-49,-50,62,-45,-44,]),'TkTwoPoints':([31,34,35,36,37,38,39,40,42,45,47,51,65,66,69,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[64,-64,-47,-48,-49,-50,-46,-43,64,64,64,64,-51,-52,64,64,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,64,-42,-46,-47,-48,-49,-50,64,-45,-44,]),'TkArrow':([34,35,36,37,38,39,40,45,47,65,66,73,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,111,],[-64,-47,-48,-49,-50,-46,-43,72,74,-51,-52,108,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,-45,-44,]),'TkClosePar':([34,35,36,37,38,39,40,65,66,69,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,111,],[-64,-47,-48,-49,-50,-46,-43,-51,-52,98,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-70,-71,-42,-46,-47,-48,-49,-50,111,-45,-44,]),'TkApp':([34,35,36,37,38,39,40,90,91,92,93,94,95,96,98,111,],[67,-47,-48,-49,-50,-46,-43,67,-42,-46,-47,-48,-49,-50,-45,-44,]),'TkCBracket':([76,],[110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,72,74,108,112,],[2,107,107,107,107,]),'opt_stmt_list':([3,],[4,]),'stmt_list':([3,25,],[5,48,]),'empty':([3,],[6,]),'statement':([3,25,],[7,7,]),'declaration_stmt':([3,25,],[8,8,]),'assignment_stmt':([3,25,72,74,108,112,],[9,9,101,101,101,101,]),'print_stmt':([3,25,72,74,108,112,],[10,10,102,102,102,102,]),'skip_stmt':([3,25,72,74,108,112,],[11,11,103,103,103,103,]),'return_stmt':([3,25,72,74,108,112,],[12,12,104,104,104,104,]),'if_stmt':([3,25,72,74,108,112,],[13,13,105,105,105,105,]),'while_stmt':([3,25,72,74,108,112,],[14,14,106,106,106,106,]),'declare_id_list':([15,16,49,110,],[26,28,75,115,]),'expr':([19,21,22,23,30,32,33,41,44,46,52,53,54,55,56,57,58,59,60,61,62,63,64,68,],[31,42,45,47,51,65,66,69,45,73,77,78,79,80,81,82,83,84,85,86,87,88,89,97,]),'atom':([19,21,22,23,30,32,33,41,44,46,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,90,34,]),'simple_atom':([19,21,22,23,30,32,33,41,44,46,52,53,54,55,56,57,58,59,60,61,62,63,64,67,68,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,91,40,]),'if_guards_list':([22,44,],[43,71,]),'if_guard_clause':([22,44,],[44,44,]),'body_sequencing':([72,74,108,112,],[99,109,113,116,]),'body_stmt_item':([72,74,108,112,],[100,100,100,100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','parser.py',22),
  ('block -> TkOBlock opt_stmt_list TkCBlock','block',3,'p_block','parser.py',26),
  ('opt_stmt_list -> stmt_list','opt_stmt_list',1,'p_opt_stmt_list','parser.py',93),
  ('opt_stmt_list -> empty','opt_stmt_list',1,'p_opt_stmt_list','parser.py',94),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',98),
  ('stmt_list -> statement TkSemicolon stmt_list','stmt_list',3,'p_stmt_list','parser.py',99),
  ('statement -> declaration_stmt','statement',1,'p_statement','parser.py',109),
  ('statement -> assignment_stmt','statement',1,'p_statement','parser.py',110),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',111),
  ('statement -> skip_stmt','statement',1,'p_statement','parser.py',112),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',113),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',114),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',115),
  ('declaration_stmt -> TkInt declare_id_list','declaration_stmt',2,'p_declaration_stmt','parser.py',120),
  ('declaration_stmt -> TkBool declare_id_list','declaration_stmt',2,'p_declaration_stmt','parser.py',121),
  ('declaration_stmt -> TkFunction TkOBracket TkSoForth TkNum TkCBracket declare_id_list','declaration_stmt',6,'p_declaration_stmt','parser.py',122),
  ('declare_id_list -> TkId','declare_id_list',1,'p_declare_id_list','parser.py',140),
  ('declare_id_list -> TkId TkComma declare_id_list','declare_id_list',3,'p_declare_id_list','parser.py',141),
  ('assignment_stmt -> TkId TkAsig expr','assignment_stmt',3,'p_assignment_stmt','parser.py',149),
  ('print_stmt -> TkPrint expr','print_stmt',2,'p_print_stmt','parser.py',157),
  ('skip_stmt -> TkSkip','skip_stmt',1,'p_skip_stmt','parser.py',164),
  ('return_stmt -> TkReturn expr','return_stmt',2,'p_return_stmt','parser.py',169),
  ('while_stmt -> TkWhile expr TkArrow body_sequencing TkEnd','while_stmt',5,'p_while_stmt','parser.py',176),
  ('if_guards_list_collector -> if_guard_clause_tuple','if_guards_list_collector',1,'p_if_guards_list_collector','parser.py',189),
  ('if_guards_list_collector -> if_guards_list_collector if_guard_clause_tuple','if_guards_list_collector',2,'p_if_guards_list_collector','parser.py',190),
  ('if_guard_clause_tuple -> expr TkArrow body_sequencing','if_guard_clause_tuple',3,'p_if_guard_clause_tuple','parser.py',198),
  ('if_guard_clause_tuple -> TkGuard expr TkArrow body_sequencing','if_guard_clause_tuple',4,'p_if_guard_clause_tuple','parser.py',199),
  ('if_stmt -> TkIf if_guards_list TkFi','if_stmt',3,'p_if_stmt','parser.py',212),
  ('if_guards_list -> if_guard_clause','if_guards_list',1,'p_if_guards_list','parser.py',254),
  ('if_guards_list -> if_guard_clause if_guards_list','if_guards_list',2,'p_if_guards_list','parser.py',255),
  ('if_guard_clause -> expr TkArrow body_sequencing','if_guard_clause',3,'p_if_guard_clause','parser.py',264),
  ('if_guard_clause -> TkGuard expr TkArrow body_sequencing','if_guard_clause',4,'p_if_guard_clause','parser.py',265),
  ('body_sequencing -> body_stmt_item','body_sequencing',1,'p_body_sequencing','parser.py',275),
  ('body_sequencing -> body_stmt_item TkSemicolon body_sequencing','body_sequencing',3,'p_body_sequencing','parser.py',276),
  ('body_stmt_item -> assignment_stmt','body_stmt_item',1,'p_body_stmt_item','parser.py',301),
  ('body_stmt_item -> print_stmt','body_stmt_item',1,'p_body_stmt_item','parser.py',302),
  ('body_stmt_item -> skip_stmt','body_stmt_item',1,'p_body_stmt_item','parser.py',303),
  ('body_stmt_item -> return_stmt','body_stmt_item',1,'p_body_stmt_item','parser.py',304),
  ('body_stmt_item -> if_stmt','body_stmt_item',1,'p_body_stmt_item','parser.py',305),
  ('body_stmt_item -> while_stmt','body_stmt_item',1,'p_body_stmt_item','parser.py',306),
  ('body_stmt_item -> block','body_stmt_item',1,'p_body_stmt_item','parser.py',307),
  ('atom -> atom TkApp simple_atom','atom',3,'p_atom_app','parser.py',317),
  ('atom -> simple_atom','atom',1,'p_atom_simple','parser.py',324),
  ('simple_atom -> atom TkOpenPar expr TkClosePar','simple_atom',4,'p_simple_atom_call','parser.py',328),
  ('simple_atom -> TkOpenPar expr TkClosePar','simple_atom',3,'p_simple_atom_group','parser.py',335),
  ('simple_atom -> TkId','simple_atom',1,'p_simple_atom_id','parser.py',339),
  ('simple_atom -> TkNum','simple_atom',1,'p_simple_atom_num','parser.py',343),
  ('simple_atom -> TkTrue','simple_atom',1,'p_simple_atom_true_false','parser.py',347),
  ('simple_atom -> TkFalse','simple_atom',1,'p_simple_atom_true_false','parser.py',348),
  ('simple_atom -> TkString','simple_atom',1,'p_simple_atom_string','parser.py',352),
  ('expr -> TkMinus expr','expr',2,'p_expr_uminus','parser.py',356),
  ('expr -> TkNot expr','expr',2,'p_expr_not','parser.py',362),
  ('expr -> expr TkPlus expr','expr',3,'p_expr_binop','parser.py',369),
  ('expr -> expr TkMinus expr','expr',3,'p_expr_binop','parser.py',370),
  ('expr -> expr TkMult expr','expr',3,'p_expr_binop','parser.py',371),
  ('expr -> expr TkAnd expr','expr',3,'p_expr_binop','parser.py',372),
  ('expr -> expr TkOr expr','expr',3,'p_expr_binop','parser.py',373),
  ('expr -> expr TkEqual expr','expr',3,'p_expr_binop','parser.py',374),
  ('expr -> expr TkNEqual expr','expr',3,'p_expr_binop','parser.py',375),
  ('expr -> expr TkLess expr','expr',3,'p_expr_binop','parser.py',376),
  ('expr -> expr TkGreater expr','expr',3,'p_expr_binop','parser.py',377),
  ('expr -> expr TkLeq expr','expr',3,'p_expr_binop','parser.py',378),
  ('expr -> expr TkGeq expr','expr',3,'p_expr_binop','parser.py',379),
  ('expr -> atom','expr',1,'p_expr_atom','parser.py',398),
  ('expr -> TkNum','expr',1,'p_expr_literal_num','parser.py',402),
  ('expr -> TkTrue','expr',1,'p_expr_literal_bool','parser.py',406),
  ('expr -> TkFalse','expr',1,'p_expr_literal_bool','parser.py',407),
  ('expr -> TkString','expr',1,'p_expr_string','parser.py',411),
  ('expr -> TkId','expr',1,'p_expr_ident','parser.py',415),
  ('expr -> expr TkComma expr','expr',3,'p_expr_comma','parser.py',420),
  ('expr -> expr TkTwoPoints expr','expr',3,'p_expr_twopoints','parser.py',427),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',435),
]
