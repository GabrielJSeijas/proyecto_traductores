# Gramática para el Lenguaje GCL (Guarded Command Language)
# Autores: Angel Valero 18-10436 y Gabriel Seijas 19-00036
# Etapa 2 

Simbolo inicial: program

program -> block

block -> TkOBlock opt_stmt_list TkCBlock

opt_stmt_list -> stmt_list
               | ε

stmt_list -> statement
           | statement TkSemicolon stmt_list

statement -> declaration_stmt
           | assignment_stmt
           | print_stmt
           | skip_stmt
           | return_stmt
           | if_stmt
           | while_stmt

declaration_stmt -> TkInt declare_id_list
                  | TkBool declare_id_list
                  | TkFunction TkOBracket TkSoForth TkNum TkCBracket declare_id_list

declare_id_list -> TkId
                 | TkId TkComma declare_id_list

assignment_stmt -> TkId TkAsig expr

print_stmt -> TkPrint expr

skip_stmt -> TkSkip

return_stmt -> TkReturn expr

while_stmt -> TkWhile expr TkArrow body_sequencing TkEnd

if_stmt -> TkIf if_guards_list TkFi

if_guards_list -> if_guard_clause
                | if_guard_clause if_guards_list

if_guard_clause -> expr TkArrow body_sequencing
                 | TkGuard expr TkArrow body_sequencing

body_sequencing -> body_stmt_item
                 | body_stmt_item TkSemicolon body_sequencing

body_stmt_item -> assignment_stmt
                | print_stmt
                | skip_stmt
                | return_stmt
                | if_stmt
                | while_stmt
                | block

expr -> expr TkPlus expr
     | expr TkMinus expr
     | expr TkMult expr
     | expr TkAnd expr
     | expr TkOr expr
     | expr TkEqual expr
     | expr TkNEqual expr
     | expr TkLess expr
     | expr TkGreater expr
     | expr TkLeq expr
     | expr TkGeq expr
     | expr TkComma expr
     | expr TkTwoPoints expr
     | TkMinus expr %prec UMINUS
     | TkNot expr
     | atom

atom -> atom TkApp simple_atom
     | simple_atom

simple_atom -> TkId
            | TkNum
            | TkTrue
            | TkFalse
            | TkString
            | atom TkOpenPar expr TkClosePar
            | TkOpenPar expr TkClosePar

empty -> ε


# Características principales del Lenguaje:
1. Símbolo inicial: 'program' (representa un bloque de código entre llaves '{}').
2. Declaraciones: Soporta variables ('int', 'bool') y funciones ('function[..n]').
3. Estructuras de control: 
   - Condicionales con guardias múltiples ('if cond --> ... [] cond2 --> ... fi').
   - Bucles ('while cond --> ... end').
4. Expresiones: 
   - Operadores aritméticos ('+', '-', '*'), lógicos ('and', 'or', 'not'), y comparaciones ('==', '<=', ...).
   - Accesos a funciones/arrays ('x.2'), llamadas ('x(0:a)'), y rangos ('1:3').
5. Manejo de bloques: Anidamiento de bloques '{...}' dentro de estructuras de control.

# Notas importantes:
- Precedencia de operadores: Definida en el parser (PLY) para evitar ambigüedades (e.g., '*' precede a '+').
- Producciones vacías: 'ε' permite bloques o listas vacías (e.g., '}' o 'int a;').
- Recuperación de errores: El parser detecta y reporta el primer error sintáctico con línea/columna.
- Terminales: Tokens definidos en 'lexer.py' (e.g., 'TkIf', 'TkPlus', ...).
- No terminales: En minúsculas (e.g., 'expr', 'block').
